{"version":3,"sources":["components/CounterButton.js","components/Header.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","actions.js","constants.js","reducers.js","serviceWorker.js","index.js"],"names":["CounterButton","updateCount","setState","state","count","nextProps","nextState","this","color","props","onClick","Component","Header","className","Card","name","email","id","alt","src","CardList","infocard","map","user","i","key","SearchBox","searchfield","searchChange","aria-label","type","placeholder","onChange","Scroll","style","overflow","height","children","ErrorBoundry","hasError","error","info","App","onRequestInfocards","searchField","onSearchChange","infocards","isPending","filteredInfocard","filter","toLowerCase","includes","connect","searchInfos","requestInfocards","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","initialStateSearch","initialStateInfocards","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.0aa379b7.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass CounterButton extends Component {\n  constructor() {\n    super();\n    this.state = {\n      count: 0\n    }\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    if (this.state.count !== nextState.count) {\n      return true;\n    }\n    return false;\n  }\n\n  updateCount = () => {\n    this.setState(state => {\n      return { count: state.count + 1}\n    })\n  }\n\n  render() {\n    return (\n      <button color={this.props.color} onClick={this.updateCount}>\n        Count: {this.state.count}\n      </button>\n    )\n  }\n}\n\nexport default CounterButton;","import React, { Component } from 'react';\nimport CounterButton from './CounterButton';\n\nclass Header extends Component {\n  shouldComponentUpdate(nextProps, nextState) {\n    return false;\n  }\n\n  render() {\n    return (\n      <div>\n        <h1 className='f1'>Infocards</h1>\n        <CounterButton color={'red'} />\n      </div>\n    )\n  }\n}\n\nexport default Header;","import React from 'react';\n\n\nconst Card = ({ name, email, id }) => {\n    return (\n        <div className='tc bg-washed-blue dib br3 pa3 ma2 grow bw2 shadow-5'>\n            <img alt='infocard' src={`https://robohash.org/${id}?size=200x200`} />\n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n    );\n}\n\nexport default Card;\n","import React from 'react';\nimport Card from './Card';\n\n\nconst CardList = ({ infocard }) => {\n    return (\n        <div>\n            {\n                infocard.map((user, i) => {\n                    return (\n                        <Card \n                            key={i} \n                            id={infocard[i].id} \n                            name={infocard[i].name} \n                            email={infocard[i].email}\n                        />\n                    );\n                })\n            }\n        </div>\n    );\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({ searchfield, searchChange }) => {\n    return (\n        <div className='pa2'>\n            <input\n                aria-label=\"Search Infocards\"\n                className='pa3 ba b-lightest-blue: bg-lightest-blue'\n                type='search'\n                placeholder='Search your Infocard'\n                onChange={searchChange}\n            />\n        </div>\n    );\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n    return (\n        <div style={{ overflow: 'scroll', height: '800px'}}>\n            {props.children}\n        </div>\n    );\n};\n\nexport default Scroll;","import React, { Component } from 'react';\n\nclass ErrorBoundry extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            hasError: false\n        }\n    }\n\n    componentDidCatch(error, info) {\n        this.setState({ hasError: true });\n\n    }\n\n    render() {\n        if (this.state.hasError) {\n            return <h1>Ooops. Something went wrong.</h1>\n        }\n        return this.props.children;\n    }\n}\n\nexport default ErrorBoundry;","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Header from '../components/Header';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundry from '../components/ErrorBoundry';\nimport './App.css';\nimport { setSearchField, requestInfocards } from '../actions';\n\nconst mapStateToProps = state => {\n    return {\n        searchField: state.searchInfos.searchField,\n        infocards: state.requestInfocards.infocards,\n        isPending: state.requestInfocards.isPending,\n        error: state.requestInfocards.error\n    }\n}\n\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n        onRequestInfocards: () => dispatch(requestInfocards())\n\n    } \n}\n\n\nclass App extends Component {\n    componentDidMount() {\n        this.props.onRequestInfocards();\n      }\n\n    render () { \n        const { searchField, onSearchChange, infocards, isPending } = this.props;\n        const filteredInfocard = infocards.filter(infocards => {\n            return infocards.name.toLowerCase().includes(searchField.toLowerCase());\n        })\n        return isPending ?\n            <h1>Loading</h1> :\n            (\n            <div className='tc'>   \n                <Header />\n                <SearchBox searchChange={onSearchChange}/>\n                <Scroll>\n                    <ErrorBoundry>\n                        <CardList infocard={filteredInfocard} />\n                    </ErrorBoundry>\n                </Scroll>\n            </div>\n        );\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { CHANGE_SEARCH_FIELD, REQUEST_INFOCARDS_PENDING, REQUEST_INFOCARDS_SUCCESS, REQUEST_INFOCARDS_FAILED } from './constants'\n\nexport const setSearchField = (text) => ({\n    type: CHANGE_SEARCH_FIELD,\n    payload: text\n})\n\nexport const requestInfocards = () => (dispatch) => {\n    dispatch({ type: REQUEST_INFOCARDS_PENDING });\n    fetch('https://jsonplaceholder.typicode.com/users')\n        .then(response=> response.json())\n        .then(data => dispatch({ type: REQUEST_INFOCARDS_SUCCESS, payload: data }))\n        .catch(error => dispatch({ type: REQUEST_INFOCARDS_FAILED, payload: error }))\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_INFOCARDS_PENDING = 'REQUEST_INFOCARDS_PENDING';\nexport const REQUEST_INFOCARDS_SUCCESS = 'REQUEST_INFOCARDS_SUCCESS';\nexport const REQUEST_INFOCARDS_FAILED = 'REQUEST_INFOCARDS_FAILED';","import { CHANGE_SEARCH_FIELD, REQUEST_INFOCARDS_PENDING, REQUEST_INFOCARDS_SUCCESS, REQUEST_INFOCARDS_FAILED } from './constants'\n\nconst initialStateSearch = {\n    searchField: ''\n}\n\nexport const searchInfos = (state=initialStateSearch, action={}) => {\n    switch(action.type) {\n        case CHANGE_SEARCH_FIELD:\n            return Object.assign({}, state, { searchField: action.payload });\n        default:\n            return state;\n    }\n}\n\nconst initialStateInfocards = {\n    isPending: false,\n    infocards: [],\n    error: ''\n}\n\nexport const requestInfocards = (state=initialStateInfocards, action={}) => {\n    switch(action.type) {\n        case REQUEST_INFOCARDS_PENDING:\n            return Object.assign({}, state, { isPending: true })\n        case REQUEST_INFOCARDS_SUCCESS:\n            return Object.assign({}, state, { infocards: action.payload, isPending: false })\n        case REQUEST_INFOCARDS_FAILED:\n            return Object.assign({}, state, { error: action.payload, isPending: false })\n        default:\n            return state;        \n    }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App';\nimport { searchInfos, requestInfocards } from './reducers';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({ searchInfos, requestInfocards });\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware))\n\nReactDOM.render(<Provider store={store}>\n    <App />\n</Provider>,\n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}